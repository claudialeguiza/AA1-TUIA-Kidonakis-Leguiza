# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18o_QyptAfE2P7AOAwX6vILJajtznJxxw
"""

!pip install streamlit

import streamlit as st
import pandas as pd
import joblib

# T√≠tulo de la app
st.title('Pron√≥stico de lluvia para ma√±ana')

# Cargamos el dataset para obtener el nombre
# de las columnas
df = pd.read_csv('df_filtrado.csv', index_col=0)

# Cargamos los pipelines
path_regresion = 'models/regresion_pipeline.joblib'
path_clasificacion= 'models/clasificacion_pipeline.joblib'

pipeline_reg  = joblib.load(path_regresion)
pipeline_clas = joblib.load(path_clasificacion)

feature_names = pipeline_reg.named_steps['imputer']\
                            .get_feature_names_out()


# Definimos los nombres de las variables
columnas_numericas = list(df.columns[:-2])

#Creamos un slider para las variables
features = [st.slider(columna,
            df[columna].min(),
            df[columna].max(),
            round(df[columna].mean(), 2))
            for columna in columnas_numericas]

# Mapeamos la opci√≥n booleana a un texto
# y la agregamos para la predicci√≥n junto a
# las variables n√∫mericas
raintoday_option_mapping = {'S√≠': 1, 'No': 0}
raintoday_option = st.selectbox('¬øHoy llovi√≥?',
                                list(raintoday_option_mapping.keys()))

all_features = features + [raintoday_option_mapping[raintoday_option]]

data_para_predecir = pd.DataFrame([all_features],
                                  columns=feature_names)

# Hacemos las predicciones con el input del front
pred_reg = pipeline_reg.predict(data_para_predecir)
pred_clas = pipeline_clas.predict(data_para_predecir)

# Mostramos las predicciones en la app

resultado_clas = '**s√≠** üåßÔ∏è' if pred_clas else '**no** üåû'
respuesta_reg = 'y' if pred_clas else 'pero'
resultado_reg  = round(float(pred_reg[0][0]), 2)

st.markdown(f'Probablemente ma√±ana {resultado_clas} llueva {respuesta_reg} caigan {resultado_reg} mm/h de lluvia.')